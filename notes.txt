
# create root filesystem
mkdir root
cd ./root
sudo mkdir -pv ./{bin,sbin,etc,lib,var,dev,proc,sys,run,tmp}
sudo mknod -m 600 ./dev/console c 5 1
sudo mknod -m 666 ./dev/null c 1 3

# copied /lib/ld-linux-aarch64.so.1 from debian
sudo cp /lib/ld-linux-aarch64.so.1 ./lib/
cd ..


# copied kernel from lfs project, EFI firmware from qemu, and initialize empty EFI vars
# qemu expects raw pflash devices to be 64MB in size, so adjust QEMU_EFI.fd and QEMU_VARS.fd accordingly
mkdir boot
cp /mnt/lfs/boot/vmlinux-6.13.7-lfs-debug ./boot/vmlinux
cp /usr/share/qemu-efi-aarch64/QEMU_EFI.fd ./boot/QEMU_EFI.fd
truncate -s 64M ./boot/QEMU_EFI.fd
truncate -s 64M ./boot/QEMU_VARS.fd


# desired result
disk.img is partitioned, with an EFI partition using vfat, and primary partition using ext4
mount/umount scripts use nbd to mount primary partition at ./mnt and EFI partition at ./mnt/boot
EFI partition contains just vmlinux at root (and cmdline file to adjust how linux boots)
create empty boot/QEMU_VARS.fd of size 64M
resize boot/QEMU_EFI.fd to 64M
run-disk.sh script should use pflash drives for QEMU_EFI and QEMU_VARS
use standard UEFI fallback of \EFI\BOOT\BOOTAA64.EFI
modify EFI variable shorten timeout, but otherwise no other configuration necessary
can we do the above from the EFI shell?  yes, we can!  see: help bcfg

# download shell.efi application itself from tianocore
# https://github.com/tianocore/edk2-archive/blob/master/ShellBinPkg/UefiShell/AArch64/Shell.efi
# move to ./boot/shell.efi


#
# we built our own EFI bootloader!  (efi_boot)
#

sudo apt install gnu-efi    # installs efi dev headers  (consider writing these from scratch?)

# build efi_boot.efi
./src/efi_boot/make.sh

# copy efi_boot.efi and cmdline config to EFI partition, using special fallback path: /EFI/BOOT/BOOTAA64.EFI
sudo cp ./src/efi_boot/efi_boot.efi ./root/boot/EFI/BOOT/BOOTAA64.EFI
sudo cp ./boot/cmdline ./root/boot/cmdline


# create disk.img
qemu-img create disk.img 1G

sudo modprobe nbd max_part=8
sudo qemu-nbd -c /dev/nbd1 -f raw disk.img

sudo fdisk /dev/nbd1
  # use GPT partition table
  g

  # create efi partition
  n 1 (accept default start 2048) +64M
  t uefi

  # create linux partition
  n 2 (accept default start 133120) (accept default end)

  # write results
  w

sudo mkfs.vfat /dev/nbd1p1
sudo mkfs.ext4 /dev/nbd1p2

# initial mount of filesystem
sudo mount -v /dev/nbd1p2 ./mnt
sudo mkdir -p ./mnt/boot
sudo mount -v /dev/nbd1p1 ./mnt/boot

# copy linux kernel and UEFI shell to root of EFI partition
sudo cp ./boot/vmlinux ./mnt/boot/
sudo cp ./boot/shell.efi ./mnt/boot/

# copy prepared OS to filesystem
sudo cp -r ./root/* ./mnt/

# unmount
sudo umount -v ./mnt/boot
sudo umount -v ./mnt
sudo qemu-nbd -d /dev/nbd1



#
# optionally run UEFI shell once to shorten timeout
#
./bin/run-efi-shell.sh  # uses QEMU_EFI.fs and QEMU_VARS.fd, without disk

setvar Timeout =0000

# initial boot into UEFI shell will modify BootOrder, but we don't want that
bcfg boot dump -v       # find option for "EFI Internal Shell"
bcfg boot rm 2



#
# (old approach using pure efivars to set linux command line)
#
# set efivars to boot into ThaxtOS
# from UEFI shell:
bcfg boot dump -v

# put the linux cmdline in a file on the EFI partition  (the spaces before root= are important!)
fs0:
edit cmdline
  root=/dev/vda2 rw noresume quiet
# ctrl-s to save, and ctrl-q to quit

bcfg boot add 3 fs0:\vmlinux "ThaxtOS"
bcfg boot -opt 3 fs0:\cmdline
bcfg boot mv 3 0
setvar Timeout =0000
bcfg boot dump -v
# should show ThaxtOS as first entry, including linux cmdline arguments, spaced out as UCS2 (null bytes)
#
# (end old approach)
#



#
# (old approach using GRUB)
#
# copy ./boot/grubaa64.efi from debian
sudo cp /boot/efi/EFI/debian/grubaa64.efi ./boot/EFI/BOOT/BOOTAA64.EFI

# create ./boot/EFI/BOOT/grub.cfg
set timeout=1
menuentry 'ThaxtOS' {
    set root='(hd0,1)'
    linux /vmlinux root=/dev/vda2 rw quiet
}
menuentry 'ThaxtOS (verbose)' {
    set root='(hd0,1)'
    linux /vmlinux root=/dev/vda2 rw
}
menuentry 'UEFI Shell' {
    set root='(hd0,1)'
    chainloader /shell.efi
}
